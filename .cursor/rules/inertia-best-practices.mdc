---
description: Best practices and guidelines for Inertia.js
globs: resources/js/**/*.ts,resources/js/**/*.tsx
alwaysApply: false
---
# Inertia.js Best Practices

This rule outlines best practices for using Inertia.js v2.0 in the project.

## Core Concepts

1. Inertia bridges Laravel and React/Vue without requiring an API
2. Use server-side patterns for routing and controllers
3. Use client-side components for views
4. No need for client-side routing configuration

## Project Structure

1. Page Components
   - Store in `resources/js/pages`
   - Use PascalCase for component names
   - Match route names to component paths

2. Layouts
   - Store in `resources/js/layouts`
   - Create reusable layouts for common page structures
   - Use composition over inheritance

## Data Handling

1. Props
   - Pass data from controllers using `Inertia::render()`
   - Only send necessary data to reduce payload size
   - Use proper data transformation before sending

2. Shared Data
   - Use middleware for data needed across pages
   - Handle authentication state in shared data
   - Cache shared data when possible

## Performance

1. Code Splitting
   - Use dynamic imports for large components
   - Implement lazy loading for routes
   - Use Vite for asset bundling

2. Data Management
   - Implement deferred loading for large datasets
   - Use polling for real-time updates
   - Implement infinite scrolling where appropriate

## Security

1. CSRF Protection
   - Ensure CSRF token is included in layout
   - Use Laravel's built-in CSRF protection
   - Handle expired tokens gracefully

2. Authentication
   - Use Laravel's built-in authentication
   - Handle unauthorized responses properly
   - Implement proper logout procedures

## Forms & Requests

1. Form Handling
   - Use Inertia's form helpers
   - Implement proper validation
   - Show loading states during submissions

2. File Uploads
   - Use `@inertiajs/progress` for upload progress
   - Implement proper validation
   - Handle large files appropriately

## Error Handling

1. Server Errors
   - Use proper error pages
   - Handle 404, 500, and other status codes
   - Provide user-friendly error messages

2. Client Errors
   - Implement proper form validation
   - Show validation errors clearly
   - Handle network errors gracefully
