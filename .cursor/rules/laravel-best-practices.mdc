---
description: Best practices and guidelines for Laravel
globs: **/*.{php}
alwaysApply: false
---
1. Core Principles

    - Follow Laravel's directory structure conventions
    - Use Laravel's built-in features before adding external dependencies
    - Leverage Laravel's service container and facades appropriately
    - Follow RESTful practices for controllers and routes
    - Design for scalability and maintainability, ensuring the system can grow with ease
    - Prefer iteration and modularization over duplication to promote code reuse

2. Coding Standards

    - Utilize PHP v8.2+ features (Laravel v12 requirement)
    - Adhere to coding standards defined in `pint.json`
    - Enforce strict type safety, including `array` shapes using PHPStan

    2.1 Naming Conventions
    - Use consistent naming conventions for folders, classes, and files
    - Follow Laravel's conventions: singular for models, plural for controllers (e.g., User.php, UsersController.php)
    - Use PascalCase for class names, camelCase for method names, and snake_case for database columns

    2.2 Type Declarations
    - Always use explicit return type declarations for methods and functions
    - Use appropriate PHP type hints for method parameters
    - Leverage PHP 8.2+ features like union types and nullable types when necessary

    2.3 Data Type Consistency
    - Be consistent and explicit with data type declarations throughout the codebase
    - Use type hints for properties, method parameters, and return types
    - Leverage PHP's strict typing to catch type-related errors early

3. Project Structure & Architecture

    - Remove the existing `.gitkeep` file when creating a new file
    - Follow the existing project structure; do not create additional folders
    - Do not use the `DB::` facade directlyâ€”always use `Model::query()`
    - Do not add, update, or delete dependencies without prior approval

    3.1 Directory Conventions

    `app/Http/Controllers` - Controllers
        - Do not use abstract `Controller.php` or any base controller
        - Return Inertia responses for web routes:
        ```php
        return Inertia::render('PageName', [
            'data' => $data
        ]);
        ```

    `app/Http/Requests` - Form Requests
        - Always use FormRequest for validation
        - Use `Create`, `Update`, and `Delete` verbs in naming

    `app/Actions` - Business Logic
        - Follow the Actions pattern
        - Use `Create`, `Update`, and `Delete` verbs in naming
        - Example Implementation:
            ```php
            public function store(CreateTodoRequest $request, CreateTodoAction $action)
            {
                /** @var User $user */
                $user = $request->user();

                $action->handle($user, $request->validated());

                // ...
            }
            ```

    `app/Models` - Eloquent Models
        - Do not use `fillable` in models
        - Leverage model relationships over manual joins
        - Use migrations for all database changes

4. Testing

    - All tests must be written using PEST PHP
    - Run `composer lint` after creating or modifying a file
    - Run `composer test` before finalizing any changes to ensure tests pass
    - Always confirm with approval before removing a test
    - Ensure all new code is covered by tests
    - When creating models, always generate a `{Model}Factory`

    4.1 Test Directory Structure

    - Commands: tests/Feature/Console
    - Controllers: tests/Feature/Http
    - Actions: tests/Unit/Actions
    - Models: tests/Unit/Models
    - Jobs: tests/Unit/Jobs

5. Frontend Integration

    - Use Inertia.js for frontend integration
    - Store page components in `resources/js/pages`
    - Use Tailwind CSS v4 for styling
    - Maintain a minimal UI design
    - Recompile assets after making frontend-related changes

6. Performance & Security

    - Cache expensive operations
    - Use eager loading to prevent N+1 queries
    - Queue long-running tasks
    - Use Laravel's built-in pagination
    - Use Laravel Sanctum for API authentication
    - Never store sensitive data in .env files
    - Use CSRF protection for all forms
